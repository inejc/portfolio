{"version":3,"sources":["webpack:///./src/components/postCard.js","webpack:///./src/pages/index.js"],"names":["props","React","createElement","className","count","postClass","node","frontmatter","thumbnail","style","backgroundImage","childImageSharp","fluid","src","Link","to","fields","slug","title","BlogIndex","_ref","location","data","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","postCounter","Layout","SEO","keywords","description","map","_ref2","PostCard","key","StaticQuery","query","render","Object","assign"],"mappings":"sLAGeA,KACbC,IAAAC,cAAA,WACEC,UAAY,aAAYH,EAAMI,MAAQ,GAAM,GAAM,qBAChDJ,EAAMK,aACJL,EAAMM,KAAKC,YAAYC,UAAa,aAAe,aACvDC,MACET,EAAMM,KAAKC,YAAYC,WAAa,CAClCE,gBAAkB,OAChBV,EAAMM,KAAKC,YAAYC,UAAUG,gBAAgBC,MAAMC,SAK7DZ,IAAAC,cAACY,OAAI,CAACC,GAAIf,EAAMM,KAAKU,OAAOC,KAAMd,UAAU,kBAC1CF,IAAAC,cAAA,OAAKC,UAAU,qBACbF,IAAAC,cAAA,MAAIC,UAAU,mBACXH,EAAMM,KAAKC,YAAYW,OAASlB,EAAMM,KAAKU,OAAOC,S,oBCT7D,MAAME,EAAYA,CAAAC,EAAWC,KAAc,IAAxB,KAAEC,GAAMF,EACzB,MAAMG,EAAYD,EAAKE,KAAKC,aAAaP,MACnCQ,EAAQJ,EAAKK,kBAAkBC,MACrC,IAAIC,EAAc,EAElB,OACE5B,IAAAC,cAAC4B,IAAM,CAACZ,MAAOK,GACbtB,IAAAC,cAAC6B,IAAG,CACFb,MAAM,YACNc,SAAU,CAAE,cAAe,eAE5BV,EAAKE,KAAKC,aAAaQ,aACtBhC,IAAAC,cAAA,UAAQC,UAAU,aAChBF,IAAAC,cAAA,MAAIC,UAAU,mBACXmB,EAAKE,KAAKC,aAAaQ,cAI9BhC,IAAAC,cAAA,OAAKC,UAAU,aACZuB,EAAMQ,IAAIC,IAAe,IAAd,KAAE7B,GAAM6B,EAElB,OADAN,IAEE5B,IAAAC,cAACkC,EAAQ,CACPC,IAAK/B,EAAKU,OAAOC,KACjBb,MAAOyB,EACPvB,KAAMA,EACND,UAAY,YAKpBJ,IAAAC,cAAA,OAAKC,UAAU,oBAsCNH,aACbC,IAAAC,cAACoC,cAAW,CACVC,MAnCY,aAoCZC,OAAQlB,GACNrB,IAAAC,cAACiB,EAASsB,OAAAC,OAAA,CAACrB,SAAUrB,EAAMqB,SAAUrB,OAAK,EAACsB,KAAMA,GAAUtB,O","file":"component---src-pages-index-js-168eb647fa7feabddca8.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default props => (\n  <article\n    className={`post-card ${props.count % 3 === 0 && `post-card-large`} ${\n      props.postClass\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\n    style={\n      props.node.frontmatter.thumbnail && {\n        backgroundImage: `url(${\n          props.node.frontmatter.thumbnail.childImageSharp.fluid.src\n        })`,\n      }\n    }\n  >\n    <Link to={props.node.fields.slug} className=\"post-card-link\">\n      <div className=\"post-card-content\">\n        <h2 className=\"post-card-title\">\n          {props.node.frontmatter.title || props.node.fields.slug}\n        </h2>\n      </div>\n    </Link>\n  </article>\n)\n","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostCard from \"../components/postCard\"\n\nimport \"../utils/normalize.css\"\nimport \"../utils/css/screen.css\"\n\nconst BlogIndex = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  let postCounter = 0\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO\n        title=\"Portfolio\"\n        keywords={[`photography`, `portfolio`]}\n      />\n      {data.site.siteMetadata.description && (\n        <header className=\"page-head\">\n          <h2 className=\"page-head-title\">\n            {data.site.siteMetadata.description}\n          </h2>\n        </header>\n      )}\n      <div className=\"post-feed\">\n        {posts.map(({ node }) => {\n          postCounter++\n          return (\n            <PostCard\n              key={node.fields.slug}\n              count={postCounter}\n              node={node}\n              postClass={`post`}\n            />\n          )\n        })}\n      </div>\n      <div className=\"post-feed-end\"></div>\n    </Layout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 3000) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <BlogIndex location={props.location} props data={data} {...props} />\n    )}\n  />\n)\n"],"sourceRoot":""}